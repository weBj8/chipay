//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use std::fmt;
use uuid::Uuid;
use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use serde::Serialize;
use sea_orm::Set;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "order")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub uuid: String,
    #[sea_orm(column_type = "custom(\"DATETIME\")")]
    pub timestamp: String,
    #[sea_orm(column_type = "Text")]
    pub afd_order: String,
    pub price: i32,
    #[sea_orm(column_type = "Text")]
    pub cdk: Option<String>,
    #[sea_orm(nullable)]
    pub plan: i32,
    pub status: Status,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl ActiveModel {
    pub fn new(price: i32, plan_id: i32) -> Self {
        let uuid = Uuid::new_v4().to_string();
        let utc_now: DateTime<Utc> = Utc::now();
        let timestamp_secs = utc_now.timestamp();

        Self {
            uuid: Set(uuid),
            timestamp: Set(timestamp_secs.to_string()),
            afd_order: Set("".into()),
            price: Set(price),
            cdk: Set(None),
            plan: Set(plan_id),
            status: Set(Status::Pending),
        }
    }
}

#[derive(EnumIter, DeriveActiveEnum, Debug, Clone, Copy, Serialize, PartialEq, Eq)]
#[sea_orm(
    rs_type = "String",
    db_type = "String(StringLen::None)",
    rename_all = "camelCase"
)]
pub enum Status {
    Pending,
    Completed,
    Failed,
    NotFound,
}

impl fmt::Display for Status {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "{}",
            match self {
                Status::Pending => "pending",
                Status::Completed => "completed",
                Status::Failed => "failed",
                Status::NotFound => "not found",
            }
        )
    }
}
